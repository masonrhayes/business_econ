read_csv("K:\private\masonrhayes\scite\marketing\pharma\out.csv")
library(tidyverse)
read_delim("K:\private\masonrhayes\scite\marketing\pharma\out.csv")
read_delim("K:\private\masonrhayes\scite\marketing\pharma\out.csv", delim = "\p")
read_delim("K:\private\masonrhayes\scite\marketing\pharma\out.csv", delim = "\\")
read_delim("K:\private\masonrhayes\scite\marketing\pharma\out.csv", delim = " ")
library(tidyverse)
library(tidyverse)
r version
library(tidyverse)
u = epsilon = NULL
u = epsilon = x = xi = p = NULL
library(rjags)
library(coda)
library(data.table)
library(tidyverse)
library(stargazer)
install.packages("rjags")
install.packages("coda")
install.packages("data.table")
install.packages("data.table")
# Load in data
# From Gary Koop's book, Bayesian Econometrics
# Data provide sales prices and characteristics of homes in Windsor, Canada in 1987
setwd("C:/Users/mason/Documents/projects/m2s1/business_econ")
data<-read.table("homeprices.txt",sep="")
colnames(data)<-c("price","lotsize","beds","baths","storeys","drive","recroom","basement","gas","aircon","garages","desireloc")
N <- dim(data)[1]
dat <- list(Y=data$price, x1=data$lotsize, x2=data$beds, x3=data$baths, x4=data$storeys, x5 = data$recroom, x6 = data$basement, x7 = data$garages, N=N)
# Before specifying the hyperparameters, we may want to look at the data to develop intuition about correlatons
plot(data$lotsize,data$price)
plot(data$beds,data$price)
plot(data$baths,data$price)
plot(data$storeys,data$price)
plot(data$recroom, data$price)
plot(data$basement, data$price)
plot(data$garages, data$price)
params <- c("beta0", "beta1", "beta2", "beta3", "beta4", "beta5", "beta6", "beta7", "tau", "taub0", "taub1", "taub2", "taub3", "taub4", "taub5", "taub6", "taub7")
jags_model = "
model {
for (i in 1:N){
Y[i] ~ dnorm(mu[i],tau)
mu[i] <- beta0 + beta1*x1[i] + beta2*x2[i] + beta3*x3[i] + beta4*x4[i] + beta5*x5[i] + beta6*x6[i] + beta7*x7[i]
}
beta0 ~ dnorm(0, taub0)
beta1 ~ dnorm(10, taub1)
beta2 ~ dnorm(5000, taub2)
beta3 ~ dnorm(10000, taub3)
beta4 ~ dnorm(10000, taub4)
beta5 ~ dnorm(0, taub5)
beta6 ~ dnorm(0, taub6)
beta7 ~ dnorm(0, taub7)
tau ~ dgamma(0.001, 0.001)
taub0 ~ dgamma(0.001, 0.001)
taub1 ~ dgamma(0.001, 0.001)
taub2 ~ dgamma(0.001, 0.001)
taub3 ~ dgamma(0.001, 0.001)
taub4 ~ dgamma(0.001, 0.001)
taub5 ~ dgamma(0.001, 0.001)
taub6 ~ dgamma(0.001, 0.001)
taub7 ~ dgamma(0.001, 0.001)
}"
library(rjags)
library(coda)
params <- c("beta0", "beta1", "beta2", "beta3", "beta4", "beta5", "beta6", "beta7", "tau", "taub0", "taub1", "taub2", "taub3", "taub4", "taub5", "taub6", "taub7")
jags_model = "
model {
for (i in 1:N){
Y[i] ~ dnorm(mu[i],tau)
mu[i] <- beta0 + beta1*x1[i] + beta2*x2[i] + beta3*x3[i] + beta4*x4[i] + beta5*x5[i] + beta6*x6[i] + beta7*x7[i]
}
beta0 ~ dnorm(0, taub0)
beta1 ~ dnorm(10, taub1)
beta2 ~ dnorm(5000, taub2)
beta3 ~ dnorm(10000, taub3)
beta4 ~ dnorm(10000, taub4)
beta5 ~ dnorm(0, taub5)
beta6 ~ dnorm(0, taub6)
beta7 ~ dnorm(0, taub7)
tau ~ dgamma(0.001, 0.001)
taub0 ~ dgamma(0.001, 0.001)
taub1 ~ dgamma(0.001, 0.001)
taub2 ~ dgamma(0.001, 0.001)
taub3 ~ dgamma(0.001, 0.001)
taub4 ~ dgamma(0.001, 0.001)
taub5 ~ dgamma(0.001, 0.001)
taub6 ~ dgamma(0.001, 0.001)
taub7 ~ dgamma(0.001, 0.001)
}"
jags.m <- jags.model(textConnection(jags_model), data=dat, n.chains=5)
library(rjags)
df = tibble(utility = 1:10)
library(tidyverse)
df = tibble(utility = 1:10)
df
df = tibble(utility = rep(1:1000, J),
product = rep(0:J+1, I))
J = 8
df = tibble(utility = rep(1:1000, J),
product = rep(0:J+1, I))
df = tibble(utility = rep(1:1000, J),
product = rep(0:9, I))
df = tibble(utility = rep(1:1000, J+1),
product = rep(0:J+1, I))
df = tibble(utility = rep(1:1000, J+1),
product = rep(1:J+1, I))
product = rep(1:J+1, I)
df = tibble(utility = rep(1:I, J),
product = rep(1:J, I))
df = tibble(utility = rep(1:I, J),
product = rep(1:J, I))
df = tibble(utility = rep(seq_along(I), J),
product = rep(seq_along(J), I))
df = tibble(utility = rep(1:I, J+1))
I = 5000
J = 8
df = tibble(utility = rep(1:I, J+1))
df = tibble(utility = rep(1:I, J+1),
product = rep(1:J+1, I))
df = tibble(utility = rep(1:I, J+1),
product = rep(0:J+1, I))
df = tibble(utility = rep(1:I, J),
product = rep(0:J, I))
df = tibble(utility = rep(1:I, J),
product = rep(0:J-1, I))
df = tibble(utility = rep(1:I, J),
product = rep(0:J, I))
df = tibble(utility = rep(1:I, J),
product = rep(1:J, I))
df = tibble(utility = rep(1:I, J+1),
product = rep(1:J+1, I))
df = tibble(utility = rep(1:I, J),
product = rep(1:J, I))
df = tibble(utility = rep(1:I, J+1),
product = rep(1:J+1, I))
df = tibble(utility = rep(1:I, J),
product = rep(1:J+1, I))
df = tibble(utility = rep(1:I, J),
product = rep(1:J+99, I))
df = tibble(utility = rep(1:I, J),
product = rep(1:J+1, I))
view(df)
df = tibble(utility = rep(1:I, J),
product = rep(1:(J+1), I))
df = tibble(utility = rep(1:I, J+1),
product = rep(1:(J+1), I))
view(df)
df = tibble(individual = rep(1:I, J+1),
product = rep(1:(J+1), I))
df %>%
arrange(individual, product) %>%
view()
df = tibble(individual = rep(1:I, J+1),
product = rep(0:J, I))
df %>%
arrange(individual, product) %>%
view()
df = tibble(individual = rep(1:I, J+1),
product = rep(0:J, I)) %>%
mutate(price = 10 - product/2,
x = 10 - product/10,
xi = product/5)
df %>%
arrange(individual, product) %>%
view()
df = tibble(individual = rep(1:I, J+1),
j = rep(0:J, I),
epsilon_i_j = NULL) %>%
mutate(p_j = 10 - j/2,
x_j = 10 - j/10,
xi_j = j/5,
beta = 1,
alpha = 1) %>%
mutate(utility = beta*x_j - alpha*p_j + xi_j + epsilon_i_j)
df = tibble(individual = rep(1:I, J+1),
j = rep(0:J, I),
epsilon_i_j = NULL) %>%
mutate(p_j = 10 - j/2,
x_j = 10 - j/10,
xi_j = j/5,
beta = 1,
alpha = 1) %>%
mutate(utility = beta*x_j - alpha*p_j + xi_j + epsilon_i_j)
df = tibble(individual = rep(1:I, J+1),
j = rep(0:J, I),
epsilon_i_j = rep(0, I *J)) %>%
mutate(p_j = 10 - j/2,
x_j = 10 - j/10,
xi_j = j/5,
beta = 1,
alpha = 1) %>%
mutate(utility = beta*x_j - alpha*p_j + xi_j + epsilon_i_j)
df = tibble(individual = rep(1:I, J+1),
j = rep(0:J, I),
epsilon_i_j = rep(0, I *(J+1))) %>%
mutate(p_j = 10 - j/2,
x_j = 10 - j/10,
xi_j = j/5,
beta = 1,
alpha = 1) %>%
mutate(utility = beta*x_j - alpha*p_j + xi_j + epsilon_i_j)
df %>%
arrange(individual, product) %>%
view()
df %>%
arrange(individual, j) %>%
view()
df = tibble(individual = rep(1:I, J+1),
j = rep(0:J, I),
epsilon = rep(0, I *(J+1))) %>%
mutate(p = 10 - j/2,
x = 10 - j/10,
xi = j/5,
beta = 1,
alpha = 1)
attach(df)
length(epsilon)
dim(epsilon)
length(alpha)
df = tibble(individual = rep(1:I, J+1),
j = rep(0:J, I),
epsilon = rep(0, I *(J+1))) %>%
mutate(p = 10 - j/2,
x = 10 - j/10,
xi = j/5,
beta = 1,
alpha = 1)
view(df)
dim(epsilon)
dim(p)
view(df)
detach(df)
dim(df$epsilon)
dim(df$p)
df$p
attach(df)
I = 5000
J = 8
df = tibble(individual = rep(1:I, J+1),
j = rep(0:J, I),
epsilon = rep(0, I *(J+1))) %>%
mutate(p = 10 - j/2,
x = 10 - j/10,
xi = j/5,
beta = 1,
alpha = 1)
attach(df)
dim(p)
df = tibble(individual = rep(1:I, J+1),
j = rep(0:J, I),
epsilon = rep(0, I *(J+1))) %>%
mutate(p = 10 - j/2,
x = 10 - j/10,
xi = j/5,
beta = 1,
alpha = 1)
I = 5000
J = 8
df = tibble(individual = rep(1:I, J+1),
j = rep(0:J, I),
epsilon = rep(0, I *(J+1))) %>%
mutate(p = 10 - j/2,
x = 10 - j/10,
xi = j/5,
beta = 1,
alpha = 1)
seq_along(df)
seq_along(df[1])
seq_along(df[1,])
seq_along(df[,1])
df
length(df)
dim(df)
height(df)
df$epsilon
seq_along(df$epsilon)
seq_along(df)
library(LaplacesDemon)
df %>%
arrange(individual, j) %>%
view()
?`LaplacesDemon-package`
install.packages("EnvStats")
library(EnvStats)
df = tibble(individual = rep(1:I, J+1),
j = rep(0:J, I),
epsilon = rep(0, I *(J+1))) %>%
mutate(p = 10 - j/2,
x = 10 - j/10,
xi = j/5,
beta = 1,
alpha = 1) %>%
mutate(epsilon = revd())
df = tibble(individual = rep(1:I, J+1),
j = rep(0:J, I),
epsilon = rep(0, I *(J+1))) %>%
mutate(p = 10 - j/2,
x = 10 - j/10,
xi = j/5,
beta = 1,
alpha = 1) %>%
mutate(epsilon = revd(1))
df %>%
arrange(individual, j) %>%
view()
df = tibble(individual = rep(1:I, J+1),
j = rep(0:J, I),
epsilon = rep(0, I *(J+1))) %>%
mutate(p = 10 - j/2,
x = 10 - j/10,
xi = j/5,
beta = 1,
alpha = 1) %>%
for(i in seq_along(df$epsilon)){
epsilon[i] = revd(1)
}
epsilon[i,] = revd(1)
dim(df)
df = tibble(individual = rep(1:I, J+1),
j = rep(0:J, I),
epsilon = rep(0, I *(J+1))) %>%
mutate(p = 10 - j/2,
x = 10 - j/10,
xi = j/5,
beta = 1,
alpha = 1) %>%
for(i in 1:45000){
epsilon[i,] = revd(1)
}
df = tibble(individual = rep(1:I, J+1),
j = rep(0:J, I),
epsilon = rep(0, I *(J+1))) %>%
mutate(p = 10 - j/2,
x = 10 - j/10,
xi = j/5,
beta = 1,
alpha = 1) %>%
for(i in seq_along(df$epsilon)){
df$epsilon[i] = revd(1)
}
df %>%
arrange(individual, j) %>%
view()
df$epsilon[6]
for(i in seq_along(df$epsilon)){
df$epsilon[i] = revd(1)
}
df %>%
arrange(individual, j) %>%
view()
View(df)
df = df %>%
mutate(u = beta*x - alpha*p + xi + epsilon)
df %>%
arrange(individual, j) %>%
view()
df %>%
arrange(individual, j) %>%
view()
df %>%
group_by(individual) %>%
select(max(u))
df %>%
group_by(individual) %>%
filter(max(u))
df %>%
group_by(individual) %>%
filter(u == max(u))
df %>%
group_by(individual) %>%
filter(u == max(u)) %>%
arrange(individual, j) %>%
view()
df %>%
group_by(individual) %>%
filter(u == max(u)) %>%
arrange(individual, j) %>%
ungroup() %>%
summarize(median(j))
df %>%
group_by(individual) %>%
filter(u == max(u)) %>%
arrange(individual, j) %>%
ungroup() %>%
summarize(median(j), mean(j))
df %>%
group_by(individual) %>%
filter(u == max(u)) %>%
arrange(individual, j) %>%
ungroup() %>%
table(j)
df %>%
group_by(individual) %>%
filter(u == max(u)) %>%
arrange(individual, j) %>%
ungroup() %>%
table()
df %>%
group_by(individual) %>%
filter(u == max(u)) %>%
arrange(individual, j) %>%
ungroup()
chosen = df %>%
group_by(individual) %>%
filter(u == max(u)) %>%
arrange(individual, j) %>%
ungroup()
table(chosen$j)
table(df$j)
table(chosen$j)/table(df$j)
table(chosen$j)/table(df$j)*100
table(chosen$j)/table(df$j)*100
df = tibble(individual = rep(1:I, J+1),
j = rep(0:J, I),
epsilon = rep(0, I *(J+1))) %>%
mutate(p = 10 - j/2,
x = 5 - j/10,
xi = j/5,
beta = 1,
alpha = 1) %>%
for(i in seq_along(df$epsilon)){
df$epsilon[i] = revd(1)
}
df = tibble(individual = rep(1:I, J+1),
j = rep(0:J, I),
epsilon = rep(0, I *(J+1))) %>%
mutate(p = 10 - j/2,
x = 5 - j/10,
xi = j/5,
beta = 1,
alpha = 1)
for(i in seq_along(df$epsilon)){
df$epsilon[i] = revd(1)
}
df = df %>%
mutate(u = beta*x - alpha*p + xi + epsilon)
chosen = df %>%
group_by(individual) %>%
filter(u == max(u)) %>%
arrange(individual, j) %>%
ungroup()
table(chosen$j)/table(df$j)*100
df %>%
arrange(individual, j) %>%
view()
chosen = df %>%
group_by(individual) %>%
filter(u == max(u)) %>%
arrange(individual, j) %>%
ungroup()
view(chosen)
df = tibble(individual = rep(1:I, J+1),
j = rep(0:J, I),
epsilon = rep(0, I *(J+1))) %>%
mutate(p = 10 - j/2,
x = 10 - j/10,
xi = j/5,
beta = 1,
alpha = 1)
for(i in seq_along(df$epsilon)){
df$epsilon[i] = revd(1)
}
df = df %>%
mutate(u = beta*x - alpha*p + xi + epsilon)
quantile(df$u)
chosen = df %>%
group_by(individual) %>%
filter(u == max(u)) %>%
arrange(individual, j) %>%
ungroup()
quantile(chosen$u)
table(chosen$j)/table(df$j)*100
I = 10000
J = 8
df = tibble(individual = rep(1:I, J+1),
j = rep(0:J, I),
epsilon = rep(0, I *(J+1))) %>%
mutate(p = 10 - j/2,
x = 10 - j/10,
xi = j/5,
beta = 1,
alpha = 1)
for(i in seq_along(df$epsilon)){
df$epsilon[i] = revd(1)
}
table(chosen$j)/table(df$j)*100
I = 10000
J = 8
df = tibble(individual = rep(1:I, J+1),
j = rep(0:J, I),
epsilon = rep(0, I *(J+1))) %>%
mutate(p = 10 - j/2,
x = 10 - j/10,
xi = j/5,
beta = 1,
alpha = 1)
for(i in seq_along(df$epsilon)){
df$epsilon[i] = revd(1)
}
df = df %>%
mutate(u = beta*x - alpha*p + xi + epsilon)
df %>%
arrange(individual, j) %>%
view()
chosen = df %>%
group_by(individual) %>%
filter(u == max(u)) %>%
arrange(individual, j) %>%
ungroup()
quantile(chosen$u) # yes
table(chosen$j)/table(df$j)*100
table(chosen$j)/table(df$j)*100
